<?php

/**
 * @file
 * Implements Ogone payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the Ogone payment method
 */
function commerce_ogone_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['ogone'] = array(
    'base' => 'commerce_ogone',
    'title' => t('Ogone'),
    'short_title' => t('Ogone'),
    'display_title' => t('Ogone'),
    'description' => t('Integrates Ogone payment system'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,

  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules
 */
function commerce_ogone_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'account' => 'test',
    'pspid' => '',
    'currency' => variable_get('commerce_default_currency', 'USD'),
    'language' => '',
    'sha_in' => '',
    'sha_out' => '',
  );

  // BASIC settings
  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Ogone account'),
    '#options' => array(
      'test' => ('Test account - for testing purposes only'),
      'prod' => ('Production account - use for processing real transactions'),
    ),
    '#default_value' => $settings['account'],
  );
  $form['pspid'] = array(
    '#type' => 'textfield',
    '#title' => t('PSPID'),
    '#description' => t('Your Ogone PSPID login username'),
    '#default_value' => $settings['pspid'],
  );
  $form['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_ogone_currencies(),
    '#default_value' => $settings['currency'],
  );
  $form['language'] = array(
    '#type' => 'textfield',
    '#title' => t('Language code'),
    '#description' => t('Language code. For instance: en_US, nl_NL, fr_FR, ...'),
    '#default_value' => $settings['language'],
  );

  // SECURITY settings
  $form['sha_in'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-IN Pass phrase'),
    '#description' => t('The SHA-IN Pass phrase as entered in Ogone technical settings - "Data and origin verification" tab.'),
    '#default_value' => $settings['sha_in'],
  );
  $form['sha_out'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-1-OUT Pass phrase'),
    '#description' => t('The SHA-1-OUT Pass phrase as entered in Ogone technical settings - "Transaction feedback" tab.'),
    '#default_value' => $settings['sha_out'],
  );

  // @TODO: LAYOUT settings
  $form['#submit'][] = 'commerce_ogone_settings_form_submit';

  return $form;
}

/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_ogone_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['pspid'])) {
    drupal_set_message(t('Ogone is not configured for use. No Ogone PSPID has been specified.'), 'error');
    return array();
  }

  // Set feedback URLs
  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_ogone_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Helper function for the redirect_form callback.
 * Builds an Ogone payment form from an order object.
 */
function commerce_ogone_build_redirect_form($form, &$form_state, $order, $settings) {
  global $user;
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get financial info
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $customer_name = $wrapper->commerce_customer_billing->commerce_customer_address->name_line->value();

  // Build the data array that will be translated into hidden form values.
  // NOTE: keys should be uppercase for the SHA-1 security string
  $data = array(
    // General parameters
    'PSPID' => $settings['pspid'],
    'ORDERID' => $order->order_number,
    'AMOUNT' => $amount,
    'CURRENCY' => $currency_code,
    'LANGUAGE' => $settings['language'],
    'CN' => $customer_name,
    'EMAIL' => $order->mail,

    // Layout
    'TITLE' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),

    // Feedback URLs
    'ACCEPTURL' => $settings['return'],
    'DECLINEURL' => $settings['return'],
    'EXCEPTIONURL' => $settings['return'],
    'CANCELURL' => $settings['cancel_return'],
  );

  // Allow modules to add or alter the data sent to Ogone before signing.
  drupal_alter('commerce_ogone_data', $data, $order, $settings);

  // NOTE: data should be ordered alphabetically for the SHA-1 string
  ksort($data);

  // Build the Ogone redirection URL.
  $url = variable_get('commerce_ogone_provider_url', 'https://secure.ogone.com/ncol/');
  $url .=  $settings['account'] . '/orderstandard.asp';
  $form['#action'] = $url;

  // Generate SHA-1 security string & add hidden parameters to form
  $sha1_sig = '';
  $sha1suffix = $settings['sha_in'];
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $value = trim($value);
      // Build the SHA-1 string from all filled in parameters
      $sha1_sig .= $name . '=' . $value . $sha1suffix;
      // Add the value as a hidden form element
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }
  // Add the calculated SHA-1 string
  $form['SHASign'] = array('#type' => 'hidden', '#value' => sha1($sha1_sig));

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed with payment'),
  );

  return $form;
}

/**
 * Implements hook_redirect_form_validate().
 */
function commerce_ogone_redirect_form_validate($order, $payment_method) {
  module_load_include('inc', 'commerce_ogone', 'commerce_ogone.sha1');
  if (isset($_REQUEST['SHASIGN'])) {
    // Prepare the feedback values sent by Ogone for processing. We don't use
    // $_REQUEST since this includes the $_SESSION variables.
    $feedback = array_map('check_plain', $_GET + $_POST);
    unset($feedback['q']);
    $feedback = array_change_key_case($feedback, CASE_UPPER);

    // Check if the received SHA-1 string is valid
    $sha1out = $payment_method['settings']['sha_out'];
    if (!commerce_ogone_feedback_valid_sha1($feedback, $sha1out)) {
      watchdog('commerce_ogone', "SHA signature doesn't match", array(), WATCHDOG_ERROR);
      return FALSE;
    }

    // Process the transaction based on the Ogone parameters received
    commerce_ogone_process_transaction($order, $payment_method, $feedback);
    return TRUE;
  }
  else {
    watchdog('commerce_ogone', 'No valid SHASIGN found', array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Process the payment transaction with the info received from Ogone
 *
 * @param $order
 *   The loaded order that is being processed
 * @param $payment_method
 *   The payment method settings
 * @param $feedback
 *   The parameters received from Ogone regarding the payment
 */
function commerce_ogone_process_transaction($order, $payment_method, $feedback) {
  $transaction = commerce_payment_transaction_new('ogone', $order->order_id);
  $payment_status = commerce_ogone_feedback_status($feedback['STATUS']);

  // identifying data
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $feedback['PAYID'];
  // payment amount details
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  // payment status
  $transaction->remote_status = $feedback['STATUS'];
  $transaction->status = $payment_status['code'];
  $transaction->message = $payment_status['message'];
  $transaction->payload = $feedback;
  commerce_payment_transaction_save($transaction);
  if ($payment_status['code'] == COMMERCE_PAYMENT_STATUS_FAILURE) {
    commerce_payment_redirect_pane_previous_page($order);
  }
  else {
    commerce_payment_redirect_pane_next_page($order);
  }
}

/**
 * Get a list of enabled currencies
 *
 * @TODO: figure out which currencies Ogone actually supports
 */
function commerce_ogone_currencies() {
  // Build a currency options list from all enabled currencies.
  $options = array();

  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = t('@code - !name', array('@code' => $currency['code'], '@symbol' => $currency['symbol'], '!name' => $currency['name']));

    if (!empty($currency['symbol'])) {
      $options[$currency_code] .= ' - ' . check_plain($currency['symbol']);
    }
  }

  return $options;
}

/**
 * Get a payment status and message based on Ogone status ID
 * @param $status
 *   received Ogone status ID
 * @return array
 *   key 'code' contains the commerce status
 *   key 'message' contains a textual representation of the Ogone status ID
 */
function commerce_ogone_feedback_status($status) {
  switch ($status) {
    /** SUCCESS **/
    case 4:  // Order stored
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Order stored');
      break;
    case 5:  // Authorized
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Authorized');
      break;
    case 8:  // Refund
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Refund');
      break;
    case 85:  // Refund processed by merchant
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Refund processed by merchant');
      break;
    case 9:  // Payment requested
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Payment requested');
      break;
    case 95:  // Payment processed by merchant
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Payment processed by merchant');
      break;

    /** PENDING **/
    case 40: // Stored waiting external result
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Stored waiting external result');
      break;
    case 41: // Waiting client payment
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Waiting client payment');
      break;
    case 50: // Authorized waiting external result
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authorized waiting external result');
      break;
    case 51: // Authorization waiting
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authorization waiting');
      break;
    case 55: // Stand-by
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Stand-by');
      break;
    case 56: // OK with scheduled payments
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('OK with scheduled payments');
      break;
    case 59: // Authoriz. to get manually
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Authoriz. to get manually');
      break;
    case 81: // Refund pending
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Refund pending');
      break;
    case 82: // Refund uncertain
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Refund uncertain');
      break;
    case 91: // Payment processing
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Payment processing');
      break;
    case 92: // Payment uncertain
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Payment uncertain');
      break;
    case 99: // Being processed
      $st = COMMERCE_PAYMENT_STATUS_PENDING;
      $msg = t('Being processed');
      break;

    /** FAILURE **/
    case 0:  // Incomplete or invalid
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Incomplete or invalid');
      break;
    case 1:  // Cancelled by client
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Cancelled by client');
      break;
    case 2:  // Authorization refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorization refused');
      break;
    case 52: // Authorization not known
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorization not known');
      break;
    case 57: // Error in scheduled payments
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Error in scheduled payments');
      break;
    case 6:  // Authorized and cancelled
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorized and cancelled');
      break;
    case 61: // Author. deletion waiting
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion waiting');
      break;
    case 62: // Author. deletion uncertain
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion uncertain');
      break;
    case 63: // Author. deletion refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Author. deletion refused');
      break;
    case 64: // Authorized and cancelled
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Authorized and cancelled');
      break;
    case 7:  // Payment deleted
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deleted');
      break;
    case 71:  // Payment deletion pending
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion pending');
      break;
    case 72:  // Payment deletion uncertain
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion uncertain');
      break;
    case 73:  // Payment deletion refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deletion refused');
      break;
    case 74:  // Payment deleted
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment deleted');
      break;
    case 75:  // Deletion processed by merchant
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Deletion processed by merchant');
      break;
    case 83:  // Refund refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Refund refused');
      break;
    case 84:  // Payment declined by the acquirer
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment declined by the acquirer');
      break;
    case 93:  // Payment refused
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Payment refused');
      break;
    case 94:  // Refund declined by the acquirer
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Refund declined by the acquirer');
      break;
    default:
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Unknown feedback status');
      break;
  }
  return array(
    'code' => $st,
    'message' => $msg,
  );
}
